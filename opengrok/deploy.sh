#!/bin/sh

do_exec() {
	echo "[exec]:" "$@"
	if ! "$@"; then
		echo "[exec]: FAILED." >&2
		exit 2
	fi
}

full_filename() {
local FILE="$1"

# file		dot relative
# ./file	dot relative
# ../file	parent relative
# /file		absolute
while true; do
	case "$FILE" in
		( /* ) 		
		# Remove /./ inside filename:
		while echo "$FILE" |fgrep "/./" >/dev/null 2>&1; do
			FILE=`echo "$FILE" | sed "s/\\/\\.\\//\\//"`
		done
		# Remove /../ inside filename:
		while echo "$FILE" |grep "/[^/][^/]*/\\.\\./" >/dev/null 2>&1; do
			FILE=`echo "$FILE" | sed "s/\\/[^/][^/]*\\/\\.\\.\\//\\//"`
		done
		echo "$FILE"
		exit 0
		;;
		
		(*)
		FILE=`pwd`/"$FILE"
		;;
	esac
done
}

EXEC=do_exec

myopts="-o dn: -l name:,static:,git:,rootdir:"
getopt -Q $myopts -- "$@" || exit 2
eval set -- `getopt -q $myopts -- "$@"`

DEPLOY_DIR=/var/lib/tomcat8/webapps/
OPENGROK_WAR=/opt/opengrok/lib/source.war

PROJECT=`basename \`pwd\``
[ -z "$PROJECT" ] && PROJECT="project"
ROOTDIR=
URL=
VCS=
REPO=

while [ $# -gt 0 ]; do
	case "$1" in
		-d|--rootdir)
			ROOTDIR="$2"
			shift
			;;
		-n|--name)
			PROJECT="$2"
			shift
			;;
		--static)
			VCS=static
			REPO="`full_filename \"$2\"`"
			shift
			;;
		--git)
			VCS=git
			REPO="$2"
			shift
			;;
		--)
			;;
		*)
			exit 1
			;;
	esac
	shift
done

if [ -z "$VCS" ]; then
	echo "Source data not set" >&2 
	exit 1;
fi

[ -z "$ROOTDIR" ] && ROOTDIR="/var/opengrok/$PROJECT"
[ -z "$URL" ] && URL="source-$PROJECT"

$EXEC mkdir -p "$ROOTDIR"

case "$VCS" in
	static)
		($EXEC cd $ROOTDIR; $EXEC cp -R "$REPO" src; ) || exit "$?"
		;;
	git)
		($EXEC cd $ROOTDIR; $EXEC git clone "$REPO" src; ) || exit "$?"
		;;
esac
SRCDIR="$ROOTDIR/src"

$EXEC cp "$OPENGROK_WAR" "${DEPLOY_DIR}/${URL}.war"
(
	$EXEC cd "${DEPLOY_DIR}"
	$EXEC unzip -q -d "$URL" "${URL}.war"
	
	$EXEC cd "$URL/WEB-INF"
	cat >config.tmp <<EXTRA_CONFIG_EOF
 <context-param>
    <param-name>DATA_ROOT</param-name>
    <param-value>/var/opengrok/DATA_ROOT</param-value>
    <description>REQUIRED: Full path of the directory where data files generated by OpenGrok are stored</description>
  </context-param>

  <context-param>
    <param-name>SRC_ROOT</param-name>
    <param-value>/var/opengrok/SRC_ROOT</param-value>
    <description>REQUIRED: Full path to source tree</description>
  </context-param>
EXTRA_CONFIG_EOF
	
	$EXEC sed \
		-e '/<\/listener>/r config.tmp' \
		-i "web.xml"
	rm -f config.tmp

	$EXEC sed \
		-e 's:/var/opengrok/\(etc/configuration.xml\):'"${ROOTDIR}"'/\1:' \
		-e 's:/var/opengrok/DATA_ROOT:'"${ROOTDIR}"'/data:' \
		-e 's:/var/opengrok/SRC_ROOT:'"${SRCDIR}"'/:' \
		-i "web.xml"
) || exit "$?"

(
	$EXEC cd /opt/opengrok/bin
	$EXEC export OPENGROK_VERBOSE=true
	$EXEC export OPENGROK_EXTRA_PARAMS="-w $URL"
	$EXEC export OPENGROK_INSTANCE_BASE="${ROOTDIR}"
	$EXEC ./OpenGrok index "$SRCDIR"
) || exit "$?"

(
	echo '#!/bin/sh'
	echo "cd '${ROOTDIR}'"
	echo "cd src"
	case "$VCS" in
		static)
			echo "# no way to update"
			;;
		git)
			echo "git pull"
			;;
	esac
	echo
	echo "cd /opt/opengrok/bin"
	echo "export OPENGROK_VERBOSE=true"
	echo "export OPENGROK_INSTANCE_BASE='${ROOTDIR}'"
	echo "export OPENGROK_EXTRA_PARAMS='-w $URL'"
	echo "./OpenGrok index '$SRCDIR'"
	echo
) >"$ROOTDIR/update.sh"


chmod +x "$ROOTDIR/update.sh"
